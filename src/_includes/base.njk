<!DOCTYPE html>
<html lang="en" class="dark">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{{ title or 'LaunchBook AI' }}</title>
  <link rel="icon" href="/favicon.ico" />
  <link href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="/style.css" />
  <style>body { font-family: 'Inter', sans-serif; }</style>
  <style id="template-css"></style>

<audio id="toast-sound" src="/sounds/toast.mp3" preload="auto"></audio>

  <script src="/utils/checkBlocked.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          transitionProperty: {
            'height': 'height',
            'spacing': 'margin, padding'
          }
        }
      }
    };
  </script>
</head>
<body class="transition-colors duration-300 bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100 flex flex-col min-h-screen">

  <!-- 🔝 Header -->
  <header class="bg-gradient-to-r from-blue-50 to-white dark:from-gray-900 dark:to-gray-800 shadow-sm sticky top-0 z-50">
    <div class="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center">
      <a href="/" class="text-2xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 via-indigo-500 to-purple-600 dark:from-blue-400 dark:via-purple-400 dark:to-pink-400 hover:opacity-80 transition">
        LaunchBook AI
      </a>

      <nav id="main-nav" class="hidden md:flex items-center space-x-6 text-sm font-medium">
<!-- ✅ Add these back -->
  <a href="#how-it-works" class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition">How It Works</a>
  <a href="#pricing" class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition">Pricing</a>

  <!-- 👤 Avatar Dropdown (hidden by default) -->
  <div id="nav-user-dropdown" class="relative hidden">
    <button id="user-avatar" class="w-9 h-9 rounded-full bg-blue-600 text-white font-semibold text-sm flex items-center justify-center hover:opacity-90">👤</button>
    <div id="user-menu" class="absolute right-0 mt-2 w-52 bg-white dark:bg-gray-800 rounded shadow-lg border border-gray-200 dark:border-gray-700 hidden z-50">
      <a href="/src/frontend/my-dashboard.html" class="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200">📊 My Dashboard</a>
      <a href="/profile" class="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200">🧑‍💼 Profile</a>
      <a href="/settings" class="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200">⚙️ Settings</a>
      <a href="/admin" id="admin-link" class="block px-4 py-2 text-sm text-yellow-600 dark:text-yellow-300 hover:bg-yellow-50 dark:hover:bg-yellow-900 hidden">👑 Admin</a>
      <div class="border-t border-gray-200 dark:border-gray-700"></div>
      <button id="logoutBtn" class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 dark:hover:bg-red-800">🚪 Logout</button>
    </div>
  </div>

  <!-- 🌙 Dark Mode Toggle (after Get Started) -->
  <button id="darkToggle" class="ml-2 text-xl hover:text-blue-600 dark:hover:text-blue-400 transition">
    <svg id="darkIcon" xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
      <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" />
    </svg>
  </button>
</nav>
    </div>
  </header>

  <!-- 📄 Main Content -->
  <main class="flex-1">
    {% block content %}{% endblock %}
  </main>

  <!-- 🔻 Footer -->
  <footer class="bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 text-gray-300 py-12 text-sm">
    <div class="max-w-7xl mx-auto px-4 flex flex-col md:flex-row justify-between items-center">
      <p class="text-center md:text-left">&copy; <span id="year"></span> LaunchBook AI. All rights reserved.</p>
      <div class="space-x-4 mt-4 md:mt-0 text-center md:text-right">
        <a href="/terms" class="hover:underline text-gray-400 hover:text-white">Terms</a>
        <a href="/privacy" class="hover:underline text-gray-400 hover:text-white">Privacy</a>
        <a href="/contact" class="hover:underline text-gray-400 hover:text-white">Contact</a>
      </div>
    </div>
  </footer>

  <!-- 🔌 Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js"></script>
  <script>AOS.init({ once: true, duration: 800, easing: 'ease-out' });</script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.10.2/lottie.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>
  <script>
    const container = document.getElementById('lottie-hero');
    if (container) {
      container.style.display = 'block';
      lottie.loadAnimation({
        container,
        renderer: 'svg',
        loop: true,
        autoplay: true,
        path: 'https://assets9.lottiefiles.com/packages/lf20_c7VkSt0n1W.json'
      });
    }
  </script>

  <!-- 🌙 Dark Mode Toggle -->
  <script>
    const toggleBtn = document.getElementById('darkToggle');
    const html = document.documentElement;
    const icon = document.getElementById('darkIcon');

    const isDark = localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);
    html.classList.toggle('dark', isDark);

    toggleBtn?.addEventListener('click', () => {
      const nowDark = html.classList.toggle('dark');
      localStorage.theme = nowDark ? 'dark' : 'light';
    });
  </script>

  <!-- 👤 Supabase Auth (CommonJS style) -->
  <script>
    const supabase = window.supabase.createClient('https://wgvquzflchtmgdgwugrq.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndndnF1emZsY2h0bWdkZ3d1Z3JxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE3ODcwNTYsImV4cCI6MjA2NzM2MzA1Nn0.xMIbM0AYW24qerEeAi3SDTxrNOtO5tWUYHMudxNwTjg');

    const nav = document.getElementById("main-nav");
    const avatar = document.getElementById("user-avatar");
    const menu = document.getElementById("user-menu");
    const dropdown = document.getElementById("nav-user-dropdown");

    supabase.auth.getUser().then(({ data: { user } }) => {
      if (!nav || !user) {
  const signIn = document.createElement("a");
  signIn.href = "/signin";
  signIn.textContent = "Sign In";
  signIn.className = "text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition";

  const signUp = document.createElement("a");
  signUp.href = "/signup";
  signUp.textContent = "Get Started";
  signUp.className = "bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition";

  // 👇 Insert before the darkToggle button
  const darkToggle = document.getElementById("darkToggle");
  nav.insertBefore(signIn, darkToggle);
  nav.insertBefore(signUp, darkToggle);

  return;
}

     const name = user.user_metadata?.full_name || user.user_metadata?.name || user.email;
      avatar.textContent = name.charAt(0).toUpperCase();
      dropdown.classList.remove("hidden");

      if (user.user_metadata?.role === 'admin') {
       document.getElementById("admin-link").classList.remove("hidden");
       }

      avatar.addEventListener("click", () => {
        menu.classList.toggle("hidden");
      });

      document.getElementById("logoutBtn").addEventListener("click", async () => {
  await supabase.auth.signOut();
  localStorage.toastType = "success";
  localStorage.toastMessage = "✅ You've been logged out successfully.";
  window.location.href = "/signin";
});

    });
  </script>

<!-- 🟨 Toast Container -->
<div id="toast-container" class="fixed top-5 right-5 space-y-3 z-[9999]"></div>

<!-- 🌀 Animations -->
<style>
  @keyframes fadeSlide {
    from { opacity: 0; transform: translateY(-20px) translateX(-50%); }
    to { opacity: 1; transform: translateY(0) translateX(-50%); }
  }
  @keyframes slide-in {
    from { opacity: 0; transform: translateX(20px); }
    to { opacity: 1; transform: translateX(0); }
  }
  @keyframes fadein {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  .animate-fadeSlide { animation: fadeSlide 0.4s ease-out; }
  .animate-slide-in { animation: slide-in 0.3s ease forwards; }
  .animate-fadein { animation: fadein 0.3s ease-out; }
</style>

<script>
  // ✅ Toast Handler
  window.showToast = (message, type = "success", duration = 4000) => {
    const container = document.getElementById("toast-container");
    if (!container) return;
    const wrapper = document.createElement("div");
    wrapper.className = `flex items-start gap-3 max-w-sm w-full px-4 py-3 rounded-lg shadow-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-sm text-gray-800 dark:text-gray-100 relative animate-slide-in`;
    wrapper.innerHTML = `
      <span class="text-lg">${type === "error" ? "❌" : type === "info" ? "ℹ️" : "✅"}</span>
      <div class="flex-1">${message}</div>
      <button class="text-gray-400 hover:text-red-500 absolute top-2 right-2 text-sm" aria-label="Close">&times;</button>
    `;
    wrapper.querySelector("button").addEventListener("click", () => wrapper.remove());
    container.appendChild(wrapper);
    setTimeout(() => {
      wrapper.classList.add("opacity-0", "translate-x-5");
      setTimeout(() => wrapper.remove(), 500);
    }, duration);
  };

  // ✅ Load toast if it was set
  const toastMsg = localStorage.getItem("toastMessage");
  const toastType = localStorage.getItem("toastType") || "success";
  if (toastMsg) {
    window.showToast(toastMsg, toastType);
    localStorage.removeItem("toastMessage");
    localStorage.removeItem("toastType");
  }
</script>

<script src="https://accounts.google.com/gsi/client" async defer></script>
<script>
  window.onload = function () {
    if (window.google?.accounts?.id) {
      google.accounts.id.initialize({
        client_id: "755135885950-a784v2qb5lcurno3k2p2qseg6692bfki.apps.googleusercontent.com",
        callback: async (response) => {
          const { data, error } = await supabase.auth.signInWithIdToken({
            provider: "google",
            token: response.credential,
          });
          if (error) {
            window.showToast("Google sign-in failed", "error");
          } else {
            window.location.href = "/dashboard";
          }
        },
        auto_select: false,
        itp_support: true,
        context: "signin",
        prompt_parent_id: "body",
      });
      google.accounts.id.prompt();
    }
  };
</script>

<script>
  document.getElementById("year").textContent = new Date().getFullYear();
</script>

</body>
</html>
